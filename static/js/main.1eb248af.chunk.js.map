{"version":3,"sources":["people.js","app.js","index.js"],"names":["People","props","useState","people","setPeople","name","setName","useEffect","console","log","length","document","title","onSubmit","e","preventDefault","target","reset","onChange","value","map","person","key","App","Main","rootElement","getElementById","ReactDOM","render"],"mappings":"4KAiEeA,MA/Df,SAAgBC,GAEd,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KA6CA,OAhCAC,qBAAU,WACRC,QAAQC,IAAI,+BAIdF,qBAAU,WACRC,QAAQC,IAAI,mBAAoBJ,KAC/B,CAACA,IAIJE,qBAAU,WACRC,QAAQC,IAAI,gBACRN,EAAOO,QAAU,IAAKC,SAASC,MAAT,mBAA6BP,EAA7B,QACzB,CAACF,EAAQE,IAIZE,qBAAU,WACRC,QAAQC,IAAI,iBACZE,SAASC,MAAT,eACC,IAKHL,qBAAU,WACR,OAAQ,WACNC,QAAQC,IAAI,2BAKd,6BACE,0BAAMI,SAzCS,SAACC,GAClBA,EAAEC,iBACFD,EAAEE,OAAOC,QACTZ,GAAQD,EAAU,GAAD,mBAAKD,GAAL,CAAaE,OAuC1B,2BAAOa,SA9CO,SAACJ,GACnBR,EAAQQ,EAAEE,OAAOG,WAgDbhB,EAAOiB,KAAI,SAAAC,GAAM,OACf,uBAAGC,IAAKD,GAASA,QC9CZE,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCFN,SAASC,IACP,OACE,oCACE,kBAAC,EAAD,OAKN,IAAMC,EAAcd,SAASe,eAAe,QAC5CC,IAASC,OAAO,kBAACJ,EAAD,MAAUC,I","file":"static/js/main.1eb248af.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction People(props) {\n\n  const [people, setPeople] = useState([]);\n  const [name, setName] = useState('');\n\n  const _changeName = (e) => {\n    setName(e.target.value);\n  }\n\n  const _addPerson = (e) => {\n    e.preventDefault();\n    e.target.reset();\n    name && setPeople([...people, name])\n  }\n\n  // This runs on EVERY re-render of this component\n  useEffect(() => {\n    console.log('I RUN ON EVERY RE-RENDER');\n  });\n\n  // This runs only when the name changes\n  useEffect(() => {\n    console.log('NAME CHANGED TO:', name);\n  }, [name])\n\n  // This runs only when the form is submitted (name added)\n  // (this could be a good use case for a PUT or a POST to an API...)\n  useEffect(() => {\n    console.log('PERSON ADDED');\n    if (people.length >= 1) { document.title = `Welcome, ${name}!`; }\n  }, [people, name]);\n\n  // This runs only once on the initial rendering\n  // (this could be a good use case for doing a GET from an API to pre-load a page of data)\n  useEffect(() => {\n    console.log('INITIAL MOUNT');\n    document.title = `People ...`;\n  }, []);\n\n  // This effect has a cleanup (componentDidUnmount) ... this could be in any of the\n  // above examples, but lets look at it in isolation\n\n  useEffect(() => {\n    return (() => {\n      console.log('COMPONENT UNMOUNTED');\n    })\n  })\n\n  return (\n    <div>\n      <form onSubmit={_addPerson}>\n        <input onChange={_changeName} />\n      </form>\n      {\n        people.map(person =>\n          <p key={person}>{person}</p>\n        )\n      }\n    </div>\n  )\n\n}\n\nexport default People;\n","import React from 'react';\nimport People from './people';\n\nfunction App() {\n  return (\n    <div>\n      <People />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app.js';\n\nfunction Main() {\n  return (\n    <>\n      <App />\n    </>\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}